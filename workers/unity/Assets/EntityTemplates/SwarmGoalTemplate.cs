using System;
using System.Collections.Generic;
using Improbable;
using Improbable.General;
using Improbable.Worker;
using Improbable.Math;
using Improbable.Player;
using Improbable.Unity.Core.Acls;
using UnityEngine;
using Random = UnityEngine.Random;

namespace Assets.EntityTemplates
{
    public class SwarmGoalEntityTemplate : MonoBehaviour
    {
		private static int spawnDiameter = 10;	//TODO: Have to find a way to connect this to global variable, tankSize

        // Template definition for a Fish entity
        public static SnapshotEntity GenerateFishSnapshotEntityTemplate()
        {
			//Spawn to a random position
			Coordinates goalInitialCoordinates = new Coordinates (Random.Range (-spawnDiameter, spawnDiameter),
				                             Random.Range (-spawnDiameter, spawnDiameter),
				                             Random.Range (-spawnDiameter, spawnDiameter));


			Vector3f zero = new Vector3f ();

            // Set name of Unity prefab associated with this entity
            //var SwarmGoalEntity = new SnapshotEntity { Prefab = "ExampleEntity" };
			var SwarmGoalEntity = new SnapshotEntity { Prefab = "Goal" };


            // Define components attached to snapshot entity
			SwarmGoalEntity.Add(new WorldTransform.Data(new WorldTransformData(goalInitialCoordinates, zero, 0.0f)));
				

			//Alastair's recommendation:
			var acl = Acl.Build()
				.SetReadAccess(CommonRequirementSets.PhysicsOrVisual)
				.SetWriteAccess<WorldTransform>(CommonRequirementSets.PhysicsOnly);

			SwarmGoalEntity.SetAcl(acl);

            return SwarmGoalEntity;
        }


		//This function is *not* autogenerated, but can be called anything; it is called in SnapshotMenu.cs
		public static void PopulateSnapshotWithSwarmGoalEntities(ref Dictionary<EntityId, SnapshotEntity> snapshotEntities, ref int nextAvailableId)
		{
			snapshotEntities.Add (new EntityId (nextAvailableId++), GenerateFishSnapshotEntityTemplate ());

		}


    }
}