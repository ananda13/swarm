using System;
using System.Collections.Generic;
using Improbable;
using Improbable.General;
using Improbable.Worker;
using Improbable.Math;
using Improbable.Player;
using Improbable.Unity.Core.Acls;
using UnityEngine;
using Random = UnityEngine.Random;

namespace Assets.EntityTemplates
{
    public class FishEntityTemplate : MonoBehaviour
    {
		private static int numFish = 20;
		private static int spawnDiameter = 1;	//TODO: Have to find a way to connect this to global variable, tankSize

        // Template definition for a Fish entity
        public static SnapshotEntity GenerateFishSnapshotEntityTemplate()
        {
			//Spawn to a random position
			Coordinates fishInitialCoordinates = new Coordinates (Random.Range (-spawnDiameter, spawnDiameter),
				                             Random.Range (-spawnDiameter, spawnDiameter),
				                             Random.Range (-spawnDiameter, spawnDiameter));

			Vector3f fishInitialRotation = new Vector3f (Random.Range (-30, 30),
				                                  Random.Range (-30, 30),
				                                  Random.value * 360);	//roll, pitch, yaw

			float fishInitialSpeed = Random.value;


            // Set name of Unity prefab associated with this entity
            //var FishEntity = new SnapshotEntity { Prefab = "ExampleEntity" };
			var FishEntity = new SnapshotEntity { Prefab = "Fish" };


            // Define components attached to snapshot entity
			FishEntity.Add(new WorldTransform.Data(new WorldTransformData(fishInitialCoordinates, fishInitialRotation, fishInitialSpeed)));
				

			// Grant UnityWorker (server-side) workers write-access over all of this entity's components, read-access for visual (e.g. client) workers
			//var acl = Acl.GenerateServerAuthoritativeAcl (FishEntity); //Does not currently work

			//Alastair's recommendation:
			var acl = Acl.Build()
				.SetReadAccess(CommonRequirementSets.PhysicsOrVisual)
				.SetWriteAccess<WorldTransform>(CommonRequirementSets.PhysicsOnly);

			FishEntity.SetAcl(acl);

            return FishEntity;
        }


		//This function is *not* autogenerated, but can be called anything; it is called in SnapshotMenu.cs
		public static void PopulateSnapshotWithFishEntities(ref Dictionary<EntityId, SnapshotEntity> snapshotEntities, ref int nextAvailableId)
		{
			for (var i = 0; i < numFish; i++)
				snapshotEntities.Add (new EntityId (nextAvailableId++), GenerateFishSnapshotEntityTemplate ());

		}


    }
}